import { Component, Input, Output, EventEmitter, TemplateRef } from "@angular/core";
import * as i0 from "@angular/core";
import * as i1 from "./treeview.service";
import * as i2 from "@angular/common";
import * as i3 from "carbon-components-angular/icon";
export class TreeNodeComponent {
    constructor(treeViewService) {
        this.treeViewService = treeViewService;
        this.id = `tree-node-${TreeNodeComponent.treeNodeCount++}`;
        this.active = false;
        this.disabled = false;
        this.expanded = false;
        this.selected = false;
        this.children = [];
        /**
         * Determines the depth of the node
         * Calculated by default when passing `Node` array to `TreeViewComponent`, manual entry required otherwise
         */
        this.depth = 0;
        this.nodeFocus = new EventEmitter();
        this.nodeBlur = new EventEmitter();
        this.nodeSelect = new EventEmitter();
        this.nodetoggle = new EventEmitter();
    }
    /**
     * Simple way to set all attributes of Node component via node object
     * Would simplify setting component attributes when dynamically rendering node.
     */
    set node(node) {
        this._node = node;
        this.id = node.id ?? this.id;
        this.active = node.active ?? this.active;
        this.disabled = node.disabled ?? this.disabled;
        this.expanded = node.expanded ?? this.expanded;
        this.label = node.label ?? this.label;
        this.value = node.value ?? this.value;
        this.icon = node.icon ?? this.icon;
        this.selected = node.selected ?? this.selected;
        this.depth = node.depth ?? this.depth;
        this.children = node.children ?? this.children;
    }
    get node() {
        return this._node;
    }
    /**
     * Caclulate offset for margin/padding
     */
    ngAfterContentChecked() {
        this.offset = this.calculateOffset();
    }
    /**
     * Highlight the node
     */
    ngOnInit() {
        // Highlight the node
        this.subscription = this.treeViewService.selectionObservable.subscribe((value) => {
            this.selected = value.has(this.id);
            this.active = this.selected;
        });
    }
    /**
     * Unsubscribe from subscriptions
     */
    ngOnDestroy() {
        this.subscription?.unsubscribe();
    }
    /**
     * Selects the node and emits the event from the tree view component
     * @param event
     */
    nodeClick(event) {
        if (!this.disabled) {
            this.selected = true;
            this.active = true;
            event.target.parentElement.focus();
            // Passes event to all nodes to update highlighting & parent to emit
            this.treeViewService.selectNode({ id: this.id, label: this.label, value: this.value });
        }
    }
    /**
     * Calculate the node offset
     * @returns Number
     */
    calculateOffset() {
        // Parent node with icon
        if (this.children.length && this.icon) {
            return this.depth + 1 + this.depth * 0.5;
        }
        // parent node without icon
        if (this.children.length) {
            return this.depth + 1;
        }
        // leaf node with icon
        if (this.icon) {
            return this.depth + 2 + this.depth * 0.5;
        }
        return this.depth + 2.5;
    }
    emitFocusEvent(event) {
        this.nodeFocus.emit({ node: { id: this.id, label: this.label, value: this.value }, event });
    }
    emitBlurEvent(event) {
        this.nodeBlur.emit({ node: { id: this.id, label: this.label, value: this.value }, event });
    }
    /**
     * Expand children if not disabled
     * @param event: Event
     */
    toggleExpanded(event) {
        if (!this.disabled) {
            this.nodetoggle.emit({ node: { id: this.id, label: this.label, value: this.value }, event });
            this.expanded = !this.expanded;
            // Prevent selection of the node
            event.stopPropagation();
        }
    }
    /**
     * Manages the keyboard accessibility for children expansion & selection
     */
    navigateTree(event) {
        if (event.key === "ArrowLeft" || event.key === "ArrowRight" || event.key === "Enter") {
            event.stopPropagation();
        }
        // Unexpand
        if (event.key === "ArrowLeft") {
            if (this.expanded && this.children) {
                this.toggleExpanded(event);
            }
        }
        if (event.key === "ArrowRight") {
            if (!this.expanded && this.children) {
                this.toggleExpanded(event);
            }
        }
        if (event.key === "Enter") {
            event.preventDefault();
            this.nodeClick(event);
        }
    }
    isTemplate(value) {
        return value instanceof TemplateRef;
    }
    isProjected() {
        return this.treeViewService.contentProjected;
    }
}
TreeNodeComponent.treeNodeCount = 0;
TreeNodeComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.3.0", ngImport: i0, type: TreeNodeComponent, deps: [{ token: i1.TreeViewService }], target: i0.ɵɵFactoryTarget.Component });
TreeNodeComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "14.3.0", type: TreeNodeComponent, selector: "cds-tree-node", inputs: { id: "id", active: "active", disabled: "disabled", expanded: "expanded", label: "label", selected: "selected", value: "value", icon: "icon", children: "children", depth: "depth", node: "node" }, outputs: { nodeFocus: "nodeFocus", nodeBlur: "nodeBlur", nodeSelect: "nodeSelect", nodetoggle: "nodetoggle" }, ngImport: i0, template: `
		<div
			[id]="id"
			class="cds--tree-node"
			[ngClass]="{
				'cds--tree-node--active': active,
				'cds--tree-node--disabled': disabled,
				'cds--tree-node--selected': selected,
				'cds--tree-leaf-node': !children.length,
				'cds--tree-parent-node': children.length,
				'cds--tree-node--with-icon': icon
			}"
			[attr.aria-expanded]="expanded || null"
			[attr.aria-current]="active || null"
			[attr.aria-selected]="disabled ? null : selected"
			[attr.aria-disabled]="disabled"
			role="treeitem"
			[attr.tabindex]="selected ? 0 : -1"
			(focus)="emitFocusEvent($event)"
			(blur)="emitBlurEvent($event)"
			(keydown)="navigateTree($event)">
			<div
				*ngIf="!children.length"
				class="cds--tree-node__label"
				[style.padding-inline-start.rem]="offset"
				[style.margin-inline-start.rem]="-offset"
				(click)="nodeClick($event)">
				<!-- Icon -->
				<ng-container *ngIf="icon && !isTemplate(icon)">
					<svg
						class="cds--tree-node__icon"
						[cdsIcon]="icon"
						size="16">
					</svg>
				</ng-container>
				<ng-template *ngIf="isTemplate(icon)" [ngTemplateOutlet]="icon"></ng-template>
				{{label}}
			</div>
			<div
				*ngIf="children.length"
				class="cds--tree-node__label"
				[style.padding-inline-start.rem]="offset"
				[style.margin-inline-start.rem]="-offset"
				role="group"
				(click)="nodeClick($event)">
				<span
					class="cds--tree-parent-node__toggle"
					[attr.disabled]="disabled || null"
					(click)="toggleExpanded($event)">
					<svg
						class="cds--tree-parent-node__toggle-icon"
						[ngClass]="{'cds--tree-parent-node__toggle-icon--expanded' : expanded}"
						ibmIcon="caret--down"
						size="16">
					</svg>
				</span>
				<span class="cds--tree-node__label__details">
					<!-- Icon -->
					<ng-container *ngIf="icon && !isTemplate(icon)">
						<svg
							class="cds--tree-node__icon"
							[cdsIcon]="icon"
							size="16">
						</svg>
					</ng-container>
					<ng-template *ngIf="isTemplate(icon)" [ngTemplateOutlet]="icon"></ng-template>
					{{label}}
				</span>
			</div>
			<div
				*ngIf="expanded"
				role="group"
				class="cds--tree-node__children">
				<ng-container *ngIf="isProjected(); else notProjected">
					<ng-content></ng-content>
				</ng-container>
				<ng-template #notProjected>
					<cds-tree-node
						*ngFor="let childNode of children"
						[node]="childNode"
						[depth]="depth + 1"
						[disabled]="disabled">
					</cds-tree-node>
				</ng-template>
			</div>
		</div>
	`, isInline: true, dependencies: [{ kind: "directive", type: i2.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { kind: "directive", type: i2.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "directive", type: i2.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: i2.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet", "ngTemplateOutletInjector"] }, { kind: "directive", type: i3.IconDirective, selector: "[cdsIcon], [ibmIcon]", inputs: ["ibmIcon", "cdsIcon", "size", "title", "ariaLabel", "ariaLabelledBy", "ariaHidden", "isFocusable"] }, { kind: "component", type: TreeNodeComponent, selector: "cds-tree-node", inputs: ["id", "active", "disabled", "expanded", "label", "selected", "value", "icon", "children", "depth", "node"], outputs: ["nodeFocus", "nodeBlur", "nodeSelect", "nodetoggle"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.3.0", ngImport: i0, type: TreeNodeComponent, decorators: [{
            type: Component,
            args: [{
                    selector: "cds-tree-node",
                    template: `
		<div
			[id]="id"
			class="cds--tree-node"
			[ngClass]="{
				'cds--tree-node--active': active,
				'cds--tree-node--disabled': disabled,
				'cds--tree-node--selected': selected,
				'cds--tree-leaf-node': !children.length,
				'cds--tree-parent-node': children.length,
				'cds--tree-node--with-icon': icon
			}"
			[attr.aria-expanded]="expanded || null"
			[attr.aria-current]="active || null"
			[attr.aria-selected]="disabled ? null : selected"
			[attr.aria-disabled]="disabled"
			role="treeitem"
			[attr.tabindex]="selected ? 0 : -1"
			(focus)="emitFocusEvent($event)"
			(blur)="emitBlurEvent($event)"
			(keydown)="navigateTree($event)">
			<div
				*ngIf="!children.length"
				class="cds--tree-node__label"
				[style.padding-inline-start.rem]="offset"
				[style.margin-inline-start.rem]="-offset"
				(click)="nodeClick($event)">
				<!-- Icon -->
				<ng-container *ngIf="icon && !isTemplate(icon)">
					<svg
						class="cds--tree-node__icon"
						[cdsIcon]="icon"
						size="16">
					</svg>
				</ng-container>
				<ng-template *ngIf="isTemplate(icon)" [ngTemplateOutlet]="icon"></ng-template>
				{{label}}
			</div>
			<div
				*ngIf="children.length"
				class="cds--tree-node__label"
				[style.padding-inline-start.rem]="offset"
				[style.margin-inline-start.rem]="-offset"
				role="group"
				(click)="nodeClick($event)">
				<span
					class="cds--tree-parent-node__toggle"
					[attr.disabled]="disabled || null"
					(click)="toggleExpanded($event)">
					<svg
						class="cds--tree-parent-node__toggle-icon"
						[ngClass]="{'cds--tree-parent-node__toggle-icon--expanded' : expanded}"
						ibmIcon="caret--down"
						size="16">
					</svg>
				</span>
				<span class="cds--tree-node__label__details">
					<!-- Icon -->
					<ng-container *ngIf="icon && !isTemplate(icon)">
						<svg
							class="cds--tree-node__icon"
							[cdsIcon]="icon"
							size="16">
						</svg>
					</ng-container>
					<ng-template *ngIf="isTemplate(icon)" [ngTemplateOutlet]="icon"></ng-template>
					{{label}}
				</span>
			</div>
			<div
				*ngIf="expanded"
				role="group"
				class="cds--tree-node__children">
				<ng-container *ngIf="isProjected(); else notProjected">
					<ng-content></ng-content>
				</ng-container>
				<ng-template #notProjected>
					<cds-tree-node
						*ngFor="let childNode of children"
						[node]="childNode"
						[depth]="depth + 1"
						[disabled]="disabled">
					</cds-tree-node>
				</ng-template>
			</div>
		</div>
	`
                }]
        }], ctorParameters: function () { return [{ type: i1.TreeViewService }]; }, propDecorators: { id: [{
                type: Input
            }], active: [{
                type: Input
            }], disabled: [{
                type: Input
            }], expanded: [{
                type: Input
            }], label: [{
                type: Input
            }], selected: [{
                type: Input
            }], value: [{
                type: Input
            }], icon: [{
                type: Input
            }], children: [{
                type: Input
            }], depth: [{
                type: Input
            }], node: [{
                type: Input
            }], nodeFocus: [{
                type: Output
            }], nodeBlur: [{
                type: Output
            }], nodeSelect: [{
                type: Output
            }], nodetoggle: [{
                type: Output
            }] } });
//# sourceMappingURL=data:application/json;base64,