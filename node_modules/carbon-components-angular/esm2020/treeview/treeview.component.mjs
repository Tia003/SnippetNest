import { DOCUMENT } from "@angular/common";
import { Component, Input, Output, EventEmitter, Inject, ViewChild } from "@angular/core";
import { TreeViewService } from "./treeview.service";
import * as i0 from "@angular/core";
import * as i1 from "./treeview.service";
import * as i2 from "@angular/common";
import * as i3 from "./tree-node.component";
/**
 * Get started with importing the module:
 *
 * ```typescript
 * import { TreeviewModule } from 'carbon-components-angular';
 * ```
 *
 * [See demo](../../?path=/story/components-tree-view--basic)
 */
export class TreeViewComponent {
    constructor(document, treeViewService, elementRef) {
        this.document = document;
        this.treeViewService = treeViewService;
        this.elementRef = elementRef;
        this.id = `tree-view-${TreeViewComponent.treeViewCount++}`;
        /**
         * Specify the size of the list items in the tree
         */
        this.size = "sm";
        this.select = new EventEmitter();
        this._tree = [];
    }
    /**
     * Pass `Node[]` array to have tree view render the nodes
     * Passing value will disregard projected content
     */
    set tree(treeNodes) {
        this._tree = treeNodes.map((node) => Object.assign({}, node));
        this.treeViewService.contentProjected = false;
    }
    get tree() {
        return this._tree;
    }
    /**
     * **Experimental** - Enable to select multiple nodes
     */
    set isMultiSelect(isMulti) {
        this.treeViewService.isMultiSelect = isMulti;
    }
    /**
     * Subscribe for node selection
     */
    ngOnInit() {
        this.subscription = this.treeViewService.selectionObservable.subscribe((nodesMap) => {
            // Get all values from the map to emit
            const nodes = [...nodesMap.values()];
            // Update focus to reset arrow key traversal
            // Select the current highlight node as the last node, since we preserve order in map
            this.treeWalker.currentNode = this.elementRef.nativeElement.querySelector(`#${CSS.escape(nodes[nodes.length - 1].id)}`);
            this.select.emit(this.treeViewService.isMultiSelect ? nodes : nodes[0]);
        });
    }
    ngOnDestroy() {
        this.subscription.unsubscribe();
    }
    /**
     * Initialize tree walker to support keyboard navigation
     */
    ngAfterViewInit() {
        this.treeWalker = this.document.createTreeWalker(this.root.nativeElement, NodeFilter.SHOW_ELEMENT, {
            acceptNode: function (node) {
                if (node.classList.contains(`cds--tree-node--disabled`)) {
                    return NodeFilter.FILTER_REJECT;
                }
                if (node.matches(`div.cds--tree-node`)) {
                    return NodeFilter.FILTER_ACCEPT;
                }
                return NodeFilter.FILTER_SKIP;
            }
        });
    }
    /**
     * Navigate tree using tree walker
     * @param event - KeyboardEvent
     */
    navigateTree(event) {
        if (event.key === "ArrowUp") {
            this.treeWalker.previousNode()?.focus();
        }
        if (event.key === "ArrowDown") {
            this.treeWalker.nextNode()?.focus();
        }
    }
    isProjected() {
        return this.treeViewService.contentProjected;
    }
}
TreeViewComponent.treeViewCount = 0;
TreeViewComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.3.0", ngImport: i0, type: TreeViewComponent, deps: [{ token: DOCUMENT }, { token: i1.TreeViewService }, { token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Component });
TreeViewComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "14.3.0", type: TreeViewComponent, selector: "cds-tree-view", inputs: { tree: "tree", id: "id", label: "label", size: "size", isMultiSelect: "isMultiSelect" }, outputs: { select: "select" }, providers: [TreeViewService], viewQueries: [{ propertyName: "root", first: true, predicate: ["treeWrapper"], descendants: true }], ngImport: i0, template: `
		<label
			*ngIf="label"
			[id]="id"
			class="cds--label">
			{{label}}
		</label>
		<div
			class="cds--tree"
			[ngClass]="{
				'cds--tree--sm': size === 'sm',
				'cds--tree--xs': size === 'xs'
			}"
			[attr.aria-label]="label ? label : null"
			[attr.aria-labelledby]="!label ? id : null"
			[attr.aria-multiselectable]="isMultiSelect || null"
			role="tree"
			(keydown)="navigateTree($event)"
			#treeWrapper>
			<ng-container *ngIf="isProjected(); else notProjected">
				<ng-content></ng-content>
			</ng-container>
			<ng-template #notProjected>
				<cds-tree-node
					*ngFor="let node of tree"
					[node]="node">
				</cds-tree-node>
			</ng-template>
		</div>
	`, isInline: true, dependencies: [{ kind: "directive", type: i2.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { kind: "directive", type: i2.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "directive", type: i2.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "component", type: i3.TreeNodeComponent, selector: "cds-tree-node", inputs: ["id", "active", "disabled", "expanded", "label", "selected", "value", "icon", "children", "depth", "node"], outputs: ["nodeFocus", "nodeBlur", "nodeSelect", "nodetoggle"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.3.0", ngImport: i0, type: TreeViewComponent, decorators: [{
            type: Component,
            args: [{
                    selector: "cds-tree-view",
                    template: `
		<label
			*ngIf="label"
			[id]="id"
			class="cds--label">
			{{label}}
		</label>
		<div
			class="cds--tree"
			[ngClass]="{
				'cds--tree--sm': size === 'sm',
				'cds--tree--xs': size === 'xs'
			}"
			[attr.aria-label]="label ? label : null"
			[attr.aria-labelledby]="!label ? id : null"
			[attr.aria-multiselectable]="isMultiSelect || null"
			role="tree"
			(keydown)="navigateTree($event)"
			#treeWrapper>
			<ng-container *ngIf="isProjected(); else notProjected">
				<ng-content></ng-content>
			</ng-container>
			<ng-template #notProjected>
				<cds-tree-node
					*ngFor="let node of tree"
					[node]="node">
				</cds-tree-node>
			</ng-template>
		</div>
	`,
                    providers: [TreeViewService]
                }]
        }], ctorParameters: function () { return [{ type: Document, decorators: [{
                    type: Inject,
                    args: [DOCUMENT]
                }] }, { type: i1.TreeViewService }, { type: i0.ElementRef }]; }, propDecorators: { tree: [{
                type: Input
            }], id: [{
                type: Input
            }], label: [{
                type: Input
            }], size: [{
                type: Input
            }], isMultiSelect: [{
                type: Input
            }], select: [{
                type: Output
            }], root: [{
                type: ViewChild,
                args: ["treeWrapper"]
            }] } });
//# sourceMappingURL=data:application/json;base64,