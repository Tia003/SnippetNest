import { Component, Input, HostBinding } from "@angular/core";
import * as i0 from "@angular/core";
/**
 * Component that represents a tag for labelling/categorizing using keywords. Get started with importing the module:
 *
 * ```typescript
 * import { TagModule } from 'carbon-components-angular';
 * ```
 *
 * [See demo](../../?path=/story/components-tag--basic)
 */
export class Tag {
    constructor() {
        /**
         * Type of the tag determines the styling
         */
        this.type = "gray";
        /**
         * Tag render size
         */
        this.size = "md";
        this.class = "";
    }
    get attrClass() {
        return `cds--tag cds--tag--${this.type} cds--tag--${this.size} cds--layout--size-${this.size} ${this.class}`;
    }
}
Tag.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.3.0", ngImport: i0, type: Tag, deps: [], target: i0.ɵɵFactoryTarget.Component });
Tag.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "14.3.0", type: Tag, selector: "cds-tag, ibm-tag", inputs: { type: "type", size: "size", class: "class" }, host: { properties: { "attr.class": "this.attrClass" } }, ngImport: i0, template: `<ng-content></ng-content>`, isInline: true });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.3.0", ngImport: i0, type: Tag, decorators: [{
            type: Component,
            args: [{
                    selector: "cds-tag, ibm-tag",
                    template: `<ng-content></ng-content>`
                }]
        }], propDecorators: { type: [{
                type: Input
            }], size: [{
                type: Input
            }], class: [{
                type: Input
            }], attrClass: [{
                type: HostBinding,
                args: ["attr.class"]
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGFnLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy90YWcvdGFnLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQ04sU0FBUyxFQUNULEtBQUssRUFDTCxXQUFXLEVBQ1gsTUFBTSxlQUFlLENBQUM7O0FBa0J2Qjs7Ozs7Ozs7R0FRRztBQUtILE1BQU0sT0FBTyxHQUFHO0lBSmhCO1FBS0M7O1dBRUc7UUFDTSxTQUFJLEdBQVksTUFBTSxDQUFDO1FBRWhDOztXQUVHO1FBQ00sU0FBSSxHQUFnQixJQUFJLENBQUM7UUFFekIsVUFBSyxHQUFHLEVBQUUsQ0FBQztLQUtwQjtJQUhBLElBQStCLFNBQVM7UUFDdkMsT0FBTyxzQkFBc0IsSUFBSSxDQUFDLElBQUksY0FBYyxJQUFJLENBQUMsSUFBSSxzQkFBc0IsSUFBSSxDQUFDLElBQUksSUFBSSxJQUFJLENBQUMsS0FBSyxFQUFFLENBQUM7SUFDOUcsQ0FBQzs7Z0dBZlcsR0FBRztvRkFBSCxHQUFHLDBLQUZMLDJCQUEyQjsyRkFFekIsR0FBRztrQkFKZixTQUFTO21CQUFDO29CQUNWLFFBQVEsRUFBRSxrQkFBa0I7b0JBQzVCLFFBQVEsRUFBRSwyQkFBMkI7aUJBQ3JDOzhCQUtTLElBQUk7c0JBQVosS0FBSztnQkFLRyxJQUFJO3NCQUFaLEtBQUs7Z0JBRUcsS0FBSztzQkFBYixLQUFLO2dCQUV5QixTQUFTO3NCQUF2QyxXQUFXO3VCQUFDLFlBQVkiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuXHRDb21wb25lbnQsXG5cdElucHV0LFxuXHRIb3N0QmluZGluZ1xufSBmcm9tIFwiQGFuZ3VsYXIvY29yZVwiO1xuXG4vKipcbiAqIFN1cHBvcnRlZCB0YWcgdHlwZXMgZm9yIGNhcmJvbiB2MTBcbiAqL1xuZXhwb3J0IHR5cGUgVGFnVHlwZSA9IFwicmVkXCIgfFxuXHRcIm1hZ2VudGFcIiB8XG5cdFwicHVycGxlXCIgfFxuXHRcImJsdWVcIiB8XG5cdFwiY3lhblwiIHxcblx0XCJ0ZWFsXCIgfFxuXHRcImdyZWVuXCIgfFxuXHRcImdyYXlcIiB8XG5cdFwiY29vbC1ncmF5XCIgfFxuXHRcIndhcm0tZ3JheVwiIHxcblx0XCJoaWdoLWNvbnRyYXN0XCIgfFxuXHRcIm91dGxpbmVcIjtcblxuLyoqXG4gKiBDb21wb25lbnQgdGhhdCByZXByZXNlbnRzIGEgdGFnIGZvciBsYWJlbGxpbmcvY2F0ZWdvcml6aW5nIHVzaW5nIGtleXdvcmRzLiBHZXQgc3RhcnRlZCB3aXRoIGltcG9ydGluZyB0aGUgbW9kdWxlOlxuICpcbiAqIGBgYHR5cGVzY3JpcHRcbiAqIGltcG9ydCB7IFRhZ01vZHVsZSB9IGZyb20gJ2NhcmJvbi1jb21wb25lbnRzLWFuZ3VsYXInO1xuICogYGBgXG4gKlxuICogW1NlZSBkZW1vXSguLi8uLi8/cGF0aD0vc3RvcnkvY29tcG9uZW50cy10YWctLWJhc2ljKVxuICovXG5AQ29tcG9uZW50KHtcblx0c2VsZWN0b3I6IFwiY2RzLXRhZywgaWJtLXRhZ1wiLFxuXHR0ZW1wbGF0ZTogYDxuZy1jb250ZW50PjwvbmctY29udGVudD5gXG59KVxuZXhwb3J0IGNsYXNzIFRhZyB7XG5cdC8qKlxuXHQgKiBUeXBlIG9mIHRoZSB0YWcgZGV0ZXJtaW5lcyB0aGUgc3R5bGluZ1xuXHQgKi9cblx0QElucHV0KCkgdHlwZTogVGFnVHlwZSA9IFwiZ3JheVwiO1xuXG5cdC8qKlxuXHQgKiBUYWcgcmVuZGVyIHNpemVcblx0ICovXG5cdEBJbnB1dCgpIHNpemU6IFwic21cIiB8IFwibWRcIiA9IFwibWRcIjtcblxuXHRASW5wdXQoKSBjbGFzcyA9IFwiXCI7XG5cblx0QEhvc3RCaW5kaW5nKFwiYXR0ci5jbGFzc1wiKSBnZXQgYXR0ckNsYXNzKCkge1xuXHRcdHJldHVybiBgY2RzLS10YWcgY2RzLS10YWctLSR7dGhpcy50eXBlfSBjZHMtLXRhZy0tJHt0aGlzLnNpemV9IGNkcy0tbGF5b3V0LS1zaXplLSR7dGhpcy5zaXplfSAke3RoaXMuY2xhc3N9YDtcblx0fVxufVxuIl19