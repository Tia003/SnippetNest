import { Directive, Input } from "@angular/core";
import { getAttributes } from "@carbon/icon-helpers";
import * as i0 from "@angular/core";
import * as i1 from "./icon.service";
/**
 * A directive for populating a svg element based on the provided carbon icon name.
 *
 * Get started with importing the module:
 *
 * ```typescript
 * import { IconModule } from 'carbon-components-angular';
 * ```
 *
 * [See demo](../../?path=/story/components-icon--basic)
 */
export class IconDirective {
    constructor(elementRef, iconService) {
        this.elementRef = elementRef;
        this.iconService = iconService;
        this.cdsIcon = "";
        this.size = "16";
        this.title = "";
        this.ariaLabel = "";
        this.ariaLabelledBy = "";
        this.ariaHidden = "";
        this.isFocusable = false;
    }
    /**
     * @deprecated since v5 - Use `cdsIcon` input property instead
     */
    set ibmIcon(iconName) {
        this.cdsIcon = iconName;
    }
    renderIcon(iconName) {
        const root = this.elementRef.nativeElement;
        let icon;
        try {
            icon = this.iconService.get(iconName, this.size.toString());
        }
        catch (error) {
            console.warn(error);
            // bail out
            return;
        }
        const domParser = new DOMParser();
        const rawSVG = icon.svg;
        const svgElement = domParser.parseFromString(rawSVG, "image/svg+xml").documentElement;
        let node = root.tagName.toUpperCase() !== "SVG" ? svgElement : svgElement.firstChild;
        root.innerHTML = ""; // Clear root element
        while (node) {
            // importNode makes a clone of the node
            // this ensures we keep looping over the nodes in the parsed document
            root.appendChild(root.ownerDocument.importNode(node, true));
            // type the node because the angular compiler freaks out if it
            // ends up thinking it's a `Node` instead of a `ChildNode`
            node = node.nextSibling;
        }
        const svg = root.tagName.toUpperCase() !== "SVG" ? svgElement : root;
        svg.setAttribute("xmlns", "http://www.w3.org/2000/svg");
        const attributes = getAttributes({
            width: icon.attrs.width,
            height: icon.attrs.height,
            viewBox: icon.attrs.viewBox,
            title: this.title,
            "aria-label": this.ariaLabel,
            "aria-labelledby": this.ariaLabelledBy,
            "aria-hidden": this.ariaHidden,
            focusable: this.isFocusable.toString()
        });
        const attrKeys = Object.keys(attributes);
        for (let i = 0; i < attrKeys.length; i++) {
            const key = attrKeys[i];
            const value = attributes[key];
            if (key === "title") {
                continue;
            }
            if (value) {
                svg.setAttribute(key, value);
            }
        }
        if (attributes["title"]) {
            const title = document.createElement("title");
            title.textContent = attributes.title;
            IconDirective.titleIdCounter++;
            title.setAttribute("id", `${icon.name}-title-${IconDirective.titleIdCounter}`);
            // title must be first for screen readers
            svg.insertBefore(title, svg.firstElementChild);
            svg.setAttribute("aria-labelledby", `${icon.name}-title-${IconDirective.titleIdCounter}`);
        }
    }
    ngAfterViewInit() {
        this.renderIcon(this.cdsIcon);
    }
    ngOnChanges({ cdsIcon }) {
        // We want to ignore first change to let the icon register
        // and add only after view has been initialized
        if (cdsIcon && !cdsIcon.isFirstChange()) {
            this.renderIcon(this.cdsIcon);
        }
    }
}
IconDirective.titleIdCounter = 0;
IconDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.3.0", ngImport: i0, type: IconDirective, deps: [{ token: i0.ElementRef }, { token: i1.IconService }], target: i0.ɵɵFactoryTarget.Directive });
IconDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "14.3.0", type: IconDirective, selector: "[cdsIcon], [ibmIcon]", inputs: { ibmIcon: "ibmIcon", cdsIcon: "cdsIcon", size: "size", title: "title", ariaLabel: "ariaLabel", ariaLabelledBy: "ariaLabelledBy", ariaHidden: "ariaHidden", isFocusable: "isFocusable" }, usesOnChanges: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.3.0", ngImport: i0, type: IconDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: "[cdsIcon], [ibmIcon]"
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i1.IconService }]; }, propDecorators: { ibmIcon: [{
                type: Input
            }], cdsIcon: [{
                type: Input
            }], size: [{
                type: Input
            }], title: [{
                type: Input
            }], ariaLabel: [{
                type: Input
            }], ariaLabelledBy: [{
                type: Input
            }], ariaHidden: [{
                type: Input
            }], isFocusable: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,