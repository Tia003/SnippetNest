import { Directive, HostBinding, Input } from "@angular/core";
import * as i0 from "@angular/core";
export class PasswordInput {
    constructor(elementRef, renderer) {
        this.elementRef = elementRef;
        this.renderer = renderer;
        this.passwordInputClass = true;
        this.inputClass = true;
        this.invalid = false;
        this.warn = false;
        this.skeleton = false;
        /**
         * @deprecated since v5 - Use `cdsLayer` directive instead
         * `light` or `dark` input theme
         */
        this.theme = "dark";
        /**
         * Input field render size
         */
        this.size = "md";
        this._type = "password";
    }
    set type(type) {
        if (type) {
            this._type = type;
            if (this.elementRef) {
                this.renderer.setAttribute(this.elementRef.nativeElement, "type", this._type);
            }
        }
    }
    /**
     * @todo - remove `cds--text-input--${size}` classes in v12
     */
    get isSizeSm() {
        return this.size === "sm";
    }
    get isSizeMd() {
        return this.size === "md";
    }
    get isSizelg() {
        return this.size === "lg";
    }
    // Size
    get sizeSm() {
        return this.size === "sm";
    }
    get sizeMd() {
        return this.size === "md";
    }
    get sizelg() {
        return this.size === "lg";
    }
    get isLightTheme() {
        return this.theme === "light";
    }
    ngAfterViewInit() {
        this.renderer.setAttribute(this.elementRef.nativeElement, "type", this._type);
    }
}
PasswordInput.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.3.0", ngImport: i0, type: PasswordInput, deps: [{ token: i0.ElementRef }, { token: i0.Renderer2 }], target: i0.ɵɵFactoryTarget.Directive });
PasswordInput.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "14.3.0", type: PasswordInput, selector: "[cdsPassword], [ibmPassword]", inputs: { type: "type", invalid: "invalid", warn: "warn", skeleton: "skeleton", theme: "theme", size: "size" }, host: { properties: { "class.cds--password-input": "this.passwordInputClass", "class.cds--text-input--sm": "this.isSizeSm", "class.cds--text-input--md": "this.isSizeMd", "class.cds--text-input--lg": "this.isSizelg", "class.cds--layout--size-sm": "this.sizeSm", "class.cds--layout--size-md": "this.sizeMd", "class.cds--layout--size-lg": "this.sizelg", "class.cds--text-input--light": "this.isLightTheme", "class.cds--text-input": "this.inputClass", "class.cds--text-input--invalid": "this.invalid", "class.cds--text-input__field-wrapper--warning": "this.warn", "class.cds--skeleton": "this.skeleton" } }, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.3.0", ngImport: i0, type: PasswordInput, decorators: [{
            type: Directive,
            args: [{
                    selector: "[cdsPassword], [ibmPassword]"
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i0.Renderer2 }]; }, propDecorators: { type: [{
                type: Input
            }], passwordInputClass: [{
                type: HostBinding,
                args: ["class.cds--password-input"]
            }], isSizeSm: [{
                type: HostBinding,
                args: ["class.cds--text-input--sm"]
            }], isSizeMd: [{
                type: HostBinding,
                args: ["class.cds--text-input--md"]
            }], isSizelg: [{
                type: HostBinding,
                args: ["class.cds--text-input--lg"]
            }], sizeSm: [{
                type: HostBinding,
                args: ["class.cds--layout--size-sm"]
            }], sizeMd: [{
                type: HostBinding,
                args: ["class.cds--layout--size-md"]
            }], sizelg: [{
                type: HostBinding,
                args: ["class.cds--layout--size-lg"]
            }], isLightTheme: [{
                type: HostBinding,
                args: ["class.cds--text-input--light"]
            }], inputClass: [{
                type: HostBinding,
                args: ["class.cds--text-input"]
            }], invalid: [{
                type: HostBinding,
                args: ["class.cds--text-input--invalid"]
            }, {
                type: Input
            }], warn: [{
                type: HostBinding,
                args: ["class.cds--text-input__field-wrapper--warning"]
            }, {
                type: Input
            }], skeleton: [{
                type: HostBinding,
                args: ["class.cds--skeleton"]
            }, {
                type: Input
            }], theme: [{
                type: Input
            }], size: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGFzc3dvcmQuZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL2lucHV0L3Bhc3N3b3JkLmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQ04sU0FBUyxFQUNULFdBQVcsRUFDWCxLQUFLLEVBSUwsTUFBTSxlQUFlLENBQUM7O0FBS3ZCLE1BQU0sT0FBTyxhQUFhO0lBeUR6QixZQUFzQixVQUFzQixFQUFZLFFBQW1CO1FBQXJELGVBQVUsR0FBVixVQUFVLENBQVk7UUFBWSxhQUFRLEdBQVIsUUFBUSxDQUFXO1FBL0NqQyx1QkFBa0IsR0FBRyxJQUFJLENBQUM7UUE2QjlCLGVBQVUsR0FBRyxJQUFJLENBQUM7UUFDQSxZQUFPLEdBQUcsS0FBSyxDQUFDO1FBQ0QsU0FBSSxHQUFHLEtBQUssQ0FBQztRQUN2QyxhQUFRLEdBQUcsS0FBSyxDQUFDO1FBRTlEOzs7V0FHRztRQUNNLFVBQUssR0FBcUIsTUFBTSxDQUFDO1FBRTFDOztXQUVHO1FBQ00sU0FBSSxHQUF1QixJQUFJLENBQUM7UUFFakMsVUFBSyxHQUFHLFVBQVUsQ0FBQztJQUVvRCxDQUFDO0lBdkRoRixJQUFhLElBQUksQ0FBQyxJQUFZO1FBQzdCLElBQUksSUFBSSxFQUFFO1lBQ1QsSUFBSSxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUM7WUFDbEIsSUFBSSxJQUFJLENBQUMsVUFBVSxFQUFFO2dCQUNwQixJQUFJLENBQUMsUUFBUSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLGFBQWEsRUFBRSxNQUFNLEVBQUUsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO2FBQzlFO1NBQ0Q7SUFDRixDQUFDO0lBR0Q7O09BRUc7SUFDSCxJQUE4QyxRQUFRO1FBQ3JELE9BQU8sSUFBSSxDQUFDLElBQUksS0FBSyxJQUFJLENBQUM7SUFDM0IsQ0FBQztJQUNELElBQThDLFFBQVE7UUFDckQsT0FBTyxJQUFJLENBQUMsSUFBSSxLQUFLLElBQUksQ0FBQztJQUMzQixDQUFDO0lBQ0QsSUFBOEMsUUFBUTtRQUNyRCxPQUFPLElBQUksQ0FBQyxJQUFJLEtBQUssSUFBSSxDQUFDO0lBQzNCLENBQUM7SUFFRCxPQUFPO0lBQ1AsSUFBK0MsTUFBTTtRQUNwRCxPQUFPLElBQUksQ0FBQyxJQUFJLEtBQUssSUFBSSxDQUFDO0lBQzNCLENBQUM7SUFDRCxJQUErQyxNQUFNO1FBQ3BELE9BQU8sSUFBSSxDQUFDLElBQUksS0FBSyxJQUFJLENBQUM7SUFDM0IsQ0FBQztJQUNELElBQStDLE1BQU07UUFDcEQsT0FBTyxJQUFJLENBQUMsSUFBSSxLQUFLLElBQUksQ0FBQztJQUMzQixDQUFDO0lBQ0QsSUFBaUQsWUFBWTtRQUM1RCxPQUFPLElBQUksQ0FBQyxLQUFLLEtBQUssT0FBTyxDQUFDO0lBQy9CLENBQUM7SUFzQkQsZUFBZTtRQUNkLElBQUksQ0FBQyxRQUFRLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsYUFBYSxFQUFFLE1BQU0sRUFBRSxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDL0UsQ0FBQzs7MEdBN0RXLGFBQWE7OEZBQWIsYUFBYTsyRkFBYixhQUFhO2tCQUh6QixTQUFTO21CQUFDO29CQUNWLFFBQVEsRUFBRSw4QkFBOEI7aUJBQ3hDO3lIQUdhLElBQUk7c0JBQWhCLEtBQUs7Z0JBUW9DLGtCQUFrQjtzQkFBM0QsV0FBVzt1QkFBQywyQkFBMkI7Z0JBS00sUUFBUTtzQkFBckQsV0FBVzt1QkFBQywyQkFBMkI7Z0JBR00sUUFBUTtzQkFBckQsV0FBVzt1QkFBQywyQkFBMkI7Z0JBR00sUUFBUTtzQkFBckQsV0FBVzt1QkFBQywyQkFBMkI7Z0JBS08sTUFBTTtzQkFBcEQsV0FBVzt1QkFBQyw0QkFBNEI7Z0JBR00sTUFBTTtzQkFBcEQsV0FBVzt1QkFBQyw0QkFBNEI7Z0JBR00sTUFBTTtzQkFBcEQsV0FBVzt1QkFBQyw0QkFBNEI7Z0JBR1EsWUFBWTtzQkFBNUQsV0FBVzt1QkFBQyw4QkFBOEI7Z0JBSUwsVUFBVTtzQkFBL0MsV0FBVzt1QkFBQyx1QkFBdUI7Z0JBQ29CLE9BQU87c0JBQTlELFdBQVc7dUJBQUMsZ0NBQWdDOztzQkFBRyxLQUFLO2dCQUNrQixJQUFJO3NCQUExRSxXQUFXO3VCQUFDLCtDQUErQzs7c0JBQUcsS0FBSztnQkFDdkIsUUFBUTtzQkFBcEQsV0FBVzt1QkFBQyxxQkFBcUI7O3NCQUFHLEtBQUs7Z0JBTWpDLEtBQUs7c0JBQWIsS0FBSztnQkFLRyxJQUFJO3NCQUFaLEtBQUsiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuXHREaXJlY3RpdmUsXG5cdEhvc3RCaW5kaW5nLFxuXHRJbnB1dCxcblx0UmVuZGVyZXIyLFxuXHRFbGVtZW50UmVmLFxuXHRBZnRlclZpZXdJbml0XG59IGZyb20gXCJAYW5ndWxhci9jb3JlXCI7XG5cbkBEaXJlY3RpdmUoe1xuXHRzZWxlY3RvcjogXCJbY2RzUGFzc3dvcmRdLCBbaWJtUGFzc3dvcmRdXCJcbn0pXG5leHBvcnQgY2xhc3MgUGFzc3dvcmRJbnB1dCBpbXBsZW1lbnRzIEFmdGVyVmlld0luaXQge1xuXG5cdEBJbnB1dCgpIHNldCB0eXBlKHR5cGU6IHN0cmluZykge1xuXHRcdGlmICh0eXBlKSB7XG5cdFx0XHR0aGlzLl90eXBlID0gdHlwZTtcblx0XHRcdGlmICh0aGlzLmVsZW1lbnRSZWYpIHtcblx0XHRcdFx0dGhpcy5yZW5kZXJlci5zZXRBdHRyaWJ1dGUodGhpcy5lbGVtZW50UmVmLm5hdGl2ZUVsZW1lbnQsIFwidHlwZVwiLCB0aGlzLl90eXBlKTtcblx0XHRcdH1cblx0XHR9XG5cdH1cblx0QEhvc3RCaW5kaW5nKFwiY2xhc3MuY2RzLS1wYXNzd29yZC1pbnB1dFwiKSBwYXNzd29yZElucHV0Q2xhc3MgPSB0cnVlO1xuXG5cdC8qKlxuXHQgKiBAdG9kbyAtIHJlbW92ZSBgY2RzLS10ZXh0LWlucHV0LS0ke3NpemV9YCBjbGFzc2VzIGluIHYxMlxuXHQgKi9cblx0QEhvc3RCaW5kaW5nKFwiY2xhc3MuY2RzLS10ZXh0LWlucHV0LS1zbVwiKSBnZXQgaXNTaXplU20oKSB7XG5cdFx0cmV0dXJuIHRoaXMuc2l6ZSA9PT0gXCJzbVwiO1xuXHR9XG5cdEBIb3N0QmluZGluZyhcImNsYXNzLmNkcy0tdGV4dC1pbnB1dC0tbWRcIikgZ2V0IGlzU2l6ZU1kKCkge1xuXHRcdHJldHVybiB0aGlzLnNpemUgPT09IFwibWRcIjtcblx0fVxuXHRASG9zdEJpbmRpbmcoXCJjbGFzcy5jZHMtLXRleHQtaW5wdXQtLWxnXCIpIGdldCBpc1NpemVsZygpIHtcblx0XHRyZXR1cm4gdGhpcy5zaXplID09PSBcImxnXCI7XG5cdH1cblxuXHQvLyBTaXplXG5cdEBIb3N0QmluZGluZyhcImNsYXNzLmNkcy0tbGF5b3V0LS1zaXplLXNtXCIpIGdldCBzaXplU20oKSB7XG5cdFx0cmV0dXJuIHRoaXMuc2l6ZSA9PT0gXCJzbVwiO1xuXHR9XG5cdEBIb3N0QmluZGluZyhcImNsYXNzLmNkcy0tbGF5b3V0LS1zaXplLW1kXCIpIGdldCBzaXplTWQoKSB7XG5cdFx0cmV0dXJuIHRoaXMuc2l6ZSA9PT0gXCJtZFwiO1xuXHR9XG5cdEBIb3N0QmluZGluZyhcImNsYXNzLmNkcy0tbGF5b3V0LS1zaXplLWxnXCIpIGdldCBzaXplbGcoKSB7XG5cdFx0cmV0dXJuIHRoaXMuc2l6ZSA9PT0gXCJsZ1wiO1xuXHR9XG5cdEBIb3N0QmluZGluZyhcImNsYXNzLmNkcy0tdGV4dC1pbnB1dC0tbGlnaHRcIikgZ2V0IGlzTGlnaHRUaGVtZSgpIHtcblx0XHRyZXR1cm4gdGhpcy50aGVtZSA9PT0gXCJsaWdodFwiO1xuXHR9XG5cblx0QEhvc3RCaW5kaW5nKFwiY2xhc3MuY2RzLS10ZXh0LWlucHV0XCIpIGlucHV0Q2xhc3MgPSB0cnVlO1xuXHRASG9zdEJpbmRpbmcoXCJjbGFzcy5jZHMtLXRleHQtaW5wdXQtLWludmFsaWRcIikgQElucHV0KCkgaW52YWxpZCA9IGZhbHNlO1xuXHRASG9zdEJpbmRpbmcoXCJjbGFzcy5jZHMtLXRleHQtaW5wdXRfX2ZpZWxkLXdyYXBwZXItLXdhcm5pbmdcIikgQElucHV0KCkgd2FybiA9IGZhbHNlO1xuXHRASG9zdEJpbmRpbmcoXCJjbGFzcy5jZHMtLXNrZWxldG9uXCIpIEBJbnB1dCgpIHNrZWxldG9uID0gZmFsc2U7XG5cblx0LyoqXG5cdCAqIEBkZXByZWNhdGVkIHNpbmNlIHY1IC0gVXNlIGBjZHNMYXllcmAgZGlyZWN0aXZlIGluc3RlYWRcblx0ICogYGxpZ2h0YCBvciBgZGFya2AgaW5wdXQgdGhlbWVcblx0ICovXG5cdEBJbnB1dCgpIHRoZW1lOiBcImxpZ2h0XCIgfCBcImRhcmtcIiA9IFwiZGFya1wiO1xuXG5cdC8qKlxuXHQgKiBJbnB1dCBmaWVsZCByZW5kZXIgc2l6ZVxuXHQgKi9cblx0QElucHV0KCkgc2l6ZTogXCJzbVwiIHwgXCJtZFwiIHwgXCJsZ1wiID0gXCJtZFwiO1xuXG5cdHByaXZhdGUgX3R5cGUgPSBcInBhc3N3b3JkXCI7XG5cblx0Y29uc3RydWN0b3IocHJvdGVjdGVkIGVsZW1lbnRSZWY6IEVsZW1lbnRSZWYsIHByb3RlY3RlZCByZW5kZXJlcjogUmVuZGVyZXIyKSB7IH1cblxuXHRuZ0FmdGVyVmlld0luaXQoKTogdm9pZCB7XG5cdFx0dGhpcy5yZW5kZXJlci5zZXRBdHRyaWJ1dGUodGhpcy5lbGVtZW50UmVmLm5hdGl2ZUVsZW1lbnQsIFwidHlwZVwiLCB0aGlzLl90eXBlKTtcblx0fVxufVxuIl19